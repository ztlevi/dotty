#!/usr/bin/env zsh
# env -- envvars & standard library for dotty; don't symlink me!
# Can be sourced by zsh/bash scripts

export XDG_CACHE_HOME=~/.cache
export XDG_CONFIG_HOME=~/.config
export XDG_DATA_HOME=~/.local/share
export XDG_BIN_HOME=~/.local/bin

export DOTTY_HOME="$(cd $(dirname "${BASH_SOURCE:-${(%):-%x}}") && pwd -P)"
export DOTTY_CONFIG_HOME="$DOTTY_HOME/config"
export DOTTY_DATA_HOME="$XDG_DATA_HOME/dotty"
export DOTTY_ASSETS_HOME="$DOTTY_HOME/assets"

export APT_INSTALL="sudo apt-get install -y --no-install-recommends --fix-missing"

function dotty(){
  $DOTTY_HOME/deploy $@
  # source/export during $DOTTY_HOME/deploy does not work. Use source to load it.
  _load_all env.zsh
}
alias D=dotty

for dir in "$XDG_CACHE_HOME" "$XDG_CONFIG_HOME" "$XDG_DATA_HOME" "$XDG_BIN_HOME" "$DOTTY_DATA_HOME"; do
  [[ -d $dir ]] || mkdir -p "$dir"
done

## Library
function _is_interactive() { [[ $- == *i* || -n $EMACS ]]; }

function _is_running() {
  for prc in "$@"; do
    pgrep -x "$prc" >/dev/null || return 1
  done
}

function _is_callable() {
  for cmd in "$@"; do
    command -v "$cmd" >/dev/null || return 1
  done
}

function _run() {
  if _is_callable "$1" && ! _is_running "$1"; then
    "$@"
  fi
}

function _call() {
  if _is_callable "$1"; then
    "$@"
  fi
}

function _source() {
  [[ -f $1 ]] && source "$1"
}

function _load() {
  case $1 in
    /*) source "$1" ;;
    *) source "$DOTTY_HOME/$1" ;;
  esac
}

function _load_all() {
  for file in "$DOTTY_DATA_HOME"/*.topic/"$1"; do
    [[ -e $file ]] && source "$file"
  done
}

function _load_repo() {
  _ensure_repo "$1" "$2" && source "$2/$3" || echo >&2 "Failed to load $1"
}

function _ensure_repo() {
  local target=$1
  local dest=$2
  if [[ ! -d $dest ]]; then
    if [[ $target =~ "^[^/]+/[^/]+$" ]]; then
      url=https://github.com/$target
    elif [[ $target =~ "^[^/]+$" ]]; then
      url=git@github.com:$USER/$target.git
    fi
    [[ -n ${dest%/*} ]] && mkdir -p ${dest%/*}
    git clone --recursive --depth 1 "$url" "$dest" || return 1
  else
    git -C $dest pull
  fi
}

function _os() {
  case $OSTYPE in
    linux*) if [[ -f /etc/arch-release ]]; then
      echo linux-arch
    elif [[ -f /etc/debian_version ]]; then
      echo linux-debian
    elif [[ -f /etc/yum.conf ]]; then
      echo linux-RHEL
    fi ;;
    darwin*) echo macos ;;
    cygwin*) echo cygwin ;;
  esac
}

function _cache() {
  command -v "$1" >/dev/null || return 1
  local cache_dir="$XDG_CACHE_HOME/${SHELL##*/}"
  local cache="$cache_dir/$1"
  if [[ ! -f $cache || ! -s $cache ]]; then
    echo "Caching $1"
    mkdir -p $cache_dir
    "$@" >$cache
  fi
  source $cache || rm -f $cache
}

function _cache_clear() {
  command rm -rf $XDG_CACHE_HOME/${SHELL##*/}
}

function get_github_latest_release_url() {
  # Function "get_github_latest_release_url": get repo's latest release download url
  # Requirement: jq needs to be installed

  # first argument: USER/REPO
  # second argument (optional): some repo's release has many assets targeting different platform. In this case,
  #   the file extension is needed to identify the asset you want.
  #   This argument is used as a regex. For example, you can either use "deb" or "\.deb".
  # Example:
  # get_github_latest_release_url "wagoodman/dive" "\.deb"

  _callable() { command -v "$1" >/dev/null || return 1; }
  if ! _callable jq; then
    echo "jq is not found. Please install jq first."
    return 1
  fi

  # This token is generated in my dummy github account, but it has access to public repo
  local token1=38b4cbd69857b6444d48
  local token2=91e066ec9aa2db16b41d
  oauth_token=$token1$token2
  local url

  local repo=$1
  local suffix=$2

  if [ -z "${repo}" ]; then
    echo "No USER/REPO defined, please use something like get_github_latest_release_url \"jgm/pandoc\"."
    return 1
  fi

  local assets
  assets=$(curl -H "Authorization: token ${oauth_token}" \
    --silent "https://api.github.com/repos/$repo/releases/latest" | jq -r ".assets")

  # Try release API
  if [[ "${assets}" != "null" ]] && [[ "${assets}" != "[]" ]]; then
    if [ -z "${suffix}" ]; then
      url=$(echo "${assets}" | jq -r ".[0].browser_download_url")
    else
      local found=false
      for row in $(echo "${assets}" | jq -r ".[] | @base64"); do
        _jq() {
          echo "${row}" | base64 --decode | jq -r "${1}"
        }
        url=$(_jq ".browser_download_url")
        if echo "${url}" | grep -qe "${suffix}$"; then
          found=true
          break
        fi
      done

      if ! "${found}"; then
        echo "Cannot find ${repo} release's assets with ${suffix} as suffix."
        return 1
      fi
    fi
  # Fallback to tag API
  else
    suffix=${suffix:-"tar.gz"}
    local version
    version=$(curl -H "Authorization: token ${oauth_token}" \
      --silent "https://api.github.com/repos/$repo/tags" | jq -r ".[0].name")
    if [[ -n "${version}" ]]; then
      local url=https://github.com/$repo/archive/$version.${suffix}
    fi
  fi

  if [[ "$url" != "null" ]]; then
    echo "$url"
    return 0
  fi

  echo "Cannot find specifided $repo, please fix the USER/REPO name."
  return 1
}
